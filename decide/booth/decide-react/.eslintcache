[{"/home/alvez29/decideReact5/decide/booth/decide-react/src/index.js":"1","/home/alvez29/decideReact5/decide/booth/decide-react/src/App.js":"2","/home/alvez29/decideReact5/decide/booth/decide-react/src/reportWebVitals.js":"3","/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Voting.js":"4","/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Login.js":"5","/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Barra.js":"6","/home/alvez29/decideReact5/decide/booth/decide-react/src/crypto/ElGamal.js":"7"},{"size":547,"mtime":1608630184227,"results":"8","hashOfConfig":"9"},{"size":1639,"mtime":1608631380486,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608630184227,"results":"11","hashOfConfig":"9"},{"size":4042,"mtime":1608631444956,"results":"12","hashOfConfig":"9"},{"size":4004,"mtime":1608630910210,"results":"13","hashOfConfig":"9"},{"size":1898,"mtime":1608630184227,"results":"14","hashOfConfig":"9"},{"size":879,"mtime":1608630184227,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1pwck3r",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/home/alvez29/decideReact5/decide/booth/decide-react/src/index.js",[],["33","34"],"/home/alvez29/decideReact5/decide/booth/decide-react/src/App.js",[],"/home/alvez29/decideReact5/decide/booth/decide-react/src/reportWebVitals.js",[],"/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Voting.js",[],"/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Login.js",[],"/home/alvez29/decideReact5/decide/booth/decide-react/src/components/Barra.js",["35"],"import React, {Component} from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\n\nexport default class Login extends Component{\n    constructor(props) {\n        super(props);   \n            \n    }   \n\n    decideLogout = (event) => {\n        event.preventDefault();\n        var data = {token: this.props.token};\n        this.postData(this.props.urlLogout, data);\n        this.props.setToken(null);\n        this.props.setUser(null);\n        document.cookie = 'decide=;';\n        this.props.setSignup(true);\n    }\n\n    postData(url, data) {\n        // Default options are marked with *\n            var headers = {\n                'content-type': 'application/json',\n            };\n            if (this.props.token) {        \n                headers['Authorization'] = 'Token ' + this.props.token;\n            }\n            \n            return axios.post(url, data, headers)\n                .then(response => {\n                    if (response.status === 200) { \n                        return response;\n                    } else {\n                        return Promise.reject(response.statusText);\n                    }\n                });\n        }\n\n    render(){\n        return(\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Decide votacion</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Inicio</Nav.Link>\n                    <Nav.Link href=\"#link\">Link test</Nav.Link>\n                    {this.props.signup ? <p></p>:<Button onClick={this.decideLogout}>Logout</Button>}\n                </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n}\n}\n","/home/alvez29/decideReact5/decide/booth/decide-react/src/crypto/ElGamal.js",["36","37"],"import { BigInteger as BigInt } from \"jsbn\";\nimport * as sjcl from 'sjcl';\n\nconst ElGamal = {};\nElGamal.BITS = 256;\n\nElGamal.getRandomInteger = function(max) {\n  var bit_length = max.bitLength();\n  var random;\n  random = sjcl.random.randomWords(bit_length, 0);\n  // we get a bit array instead of a BigInteger in this case\n  var rand_bi = new BigInt(sjcl.codec.hex.fromBits(random), 16);\n  return rand_bi.mod(max);\n  return BigInt._from_java_object(random).mod(max);\n};\n\nElGamal.encrypt = function(pk, m, r) {\n  if (m.equals(BigInt.ZERO))\n    throw \"Can't encrypt 0 with El Gamal\"\n\n  if (!r) {\n    let q = BigInt.fromInt(2).pow(ElGamal.BITS);\n    let q1 = q.subtract(BigInt.ONE);\n    r = ElGamal.getRandomInteger(q1);\n  }\n\n  var alpha = pk.g.modPow(r, pk.p);\n  var beta = (pk.y.modPow(r, pk.p)).multiply(m).mod(pk.p);\n\n  return { alpha: alpha, beta: beta };\n};\n\nexport { ElGamal }",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":9,"column":5,"nodeType":"44","messageId":"45","endLine":12,"endColumn":6},{"ruleId":"46","severity":1,"message":"47","line":14,"column":3,"nodeType":"48","messageId":"49","endLine":14,"endColumn":52},{"ruleId":"50","severity":1,"message":"51","line":19,"column":5,"nodeType":"52","messageId":"53","endLine":19,"endColumn":42},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation"]